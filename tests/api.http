@baseUrl = http://localhost:4000/api

### Variables (Replace these values with the actual values after creating wallets)
# @walletAddress1 = MYCOIN123abc...
# @privateKey1 = def456...
# @walletAddress2 = MYCOIN789xyz...

### 1. Create First Wallet
POST {{baseUrl}}/wallets
Content-Type: application/json

{}

### Example Response for Create First Wallet
# HTTP/1.1 201 Created
# {
#   "success": true,
#   "message": "Wallet created successfully",
#   "data": {
#     "address": "MYCOIN123abc...",
#     "publicKey": "04a1b2c3d4e5...",
#     "privateKey": "a1b2c3d4e5f6...", 
#     "balance": 100
#   }
# }

### 2. Create Second Wallet
POST {{baseUrl}}/wallets
Content-Type: application/json

{}

### Example Response for Create Second Wallet
# HTTP/1.1 201 Created
# {
#   "success": true,
#   "message": "Wallet created successfully",
#   "data": {
#     "address": "MYCOIN789xyz...",
#     "publicKey": "04g7h8i9j0k1...",
#     "privateKey": "b2c3d4e5f6a7...",
#     "balance": 100
#   }
# }

### 3. Get Wallet Details
GET {{baseUrl}}/wallets/MYCOIN123abc...

### Example Response for Get Wallet Details
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "data": {
#     "address": "MYCOIN123abc...",
#     "publicKey": "04a1b2c3d4e5...",
#     "balance": 100,
#     "createdAt": "2023-08-22T15:42:01.123Z"
#   }
# }

### 4. Send Coins Between Wallets
POST {{baseUrl}}/transactions/send
Content-Type: application/json

{
  "fromAddress": "MYCOIN123abc...",
  "toAddress": "MYCOIN789xyz...",
  "amount": 25,
  "privateKey": "a1b2c3d4e5f6..."
}

### Example Response for Send Coins
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "message": "Transaction completed successfully",
#   "data": {
#     "fromAddress": "MYCOIN123abc...",
#     "toAddress": "MYCOIN789xyz...",
#     "amount": 25,
#     "hash": "0xabcdef123456...",
#     "status": "CONFIRMED"
#   }
# }

### 5. View Transaction History
GET {{baseUrl}}/transactions/history/MYCOIN123abc...

### Example Response for Transaction History
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "data": [
#     {
#       "id": "6123456789abcdef...",
#       "type": "SENT",
#       "amount": 25,
#       "withAddress": "MYCOIN789xyz...",
#       "timestamp": "2023-08-22T15:45:30.123Z",
#       "status": "CONFIRMED",
#       "hash": "0xabcdef123456..."
#     },
#     {
#       "id": "6987654321fedcba...",
#       "type": "RECEIVED",
#       "amount": 10,
#       "withAddress": "MYCOIN789xyz...",
#       "timestamp": "2023-08-22T14:30:15.123Z",
#       "status": "CONFIRMED",
#       "hash": "0xfedcba654321..."
#     }
#   ]
# }

### 6. Check Wallet Balance After Transaction (Sender)
GET {{baseUrl}}/wallets/MYCOIN123abc...

### Example Response for Sender Wallet After Transaction
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "data": {
#     "address": "MYCOIN123abc...",
#     "publicKey": "04a1b2c3d4e5...",
#     "balance": 75,
#     "createdAt": "2023-08-22T15:42:01.123Z"
#   }
# }

### 7. Check Wallet Balance After Transaction (Receiver)
GET {{baseUrl}}/wallets/MYCOIN789xyz...

### Example Response for Receiver Wallet After Transaction
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "data": {
#     "address": "MYCOIN789xyz...",
#     "publicKey": "04g7h8i9j0k1...",
#     "balance": 125,
#     "createdAt": "2023-08-22T15:42:30.123Z"
#   }
# }

### 8. Get All Blockchain Transactions
GET {{baseUrl}}/transactions/all

### Example Response for Get All Blockchain Transactions
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "data": {
#     "transactions": [
#       {
#         "_id": "6123456789abcdef...",
#         "fromAddress": "MYCOIN123abc...",
#         "toAddress": "MYCOIN789xyz...",
#         "amount": 25,
#         "hash": "0xabcdef123456...",
#         "status": "CONFIRMED",
#         "timestamp": "2023-08-22T15:45:30.123Z"
#       },
#       {
#         "_id": "6987654321fedcba...",
#         "fromAddress": "MYCOIN789xyz...",
#         "toAddress": "MYCOIN123abc...",
#         "amount": 10,
#         "hash": "0xfedcba654321...",
#         "status": "CONFIRMED",
#         "timestamp": "2023-08-22T14:30:15.123Z"
#       }
#     ],
#     "pagination": {
#       "total": 25,
#       "page": 1,
#       "limit": 10,
#       "pages": 3
#     }
#   }
# }

### 9. Get Blockchain Transactions with Pagination
GET {{baseUrl}}/transactions/all?page=2&limit=5

### Example Response for Get Blockchain Transactions with Pagination
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "data": {
#     "transactions": [
#       {
#         "_id": "6567890123abcdef...",
#         "fromAddress": "MYCOIN123abc...",
#         "toAddress": "MYCOIN789xyz...",
#         "amount": 15,
#         "hash": "0x567890abcdef...",
#         "status": "CONFIRMED",
#         "timestamp": "2023-08-22T13:20:10.123Z"
#       },
#       {
#         "_id": "6345678901fedcba...",
#         "fromAddress": "MYCOIN789xyz...",
#         "toAddress": "MYCOIN123abc...",
#         "amount": 5,
#         "hash": "0x345678fedcba...",
#         "status": "CONFIRMED",
#         "timestamp": "2023-08-22T12:15:45.123Z"
#       }
#     ],
#     "pagination": {
#       "total": 25,
#       "page": 2,
#       "limit": 5,
#       "pages": 5
#     }
#   }
# }
#       { "number": 5, "word": "elephant" },
#       { "number": 6, "word": "friend" },
#       { "number": 7, "word": "grape" },
#       { "number": 8, "word": "hello" },
#       { "number": 9, "word": "island" },
#       { "number": 10, "word": "jungle" },
#       { "number": 11, "word": "kite" },
#       { "number": 12, "word": "lion" }
#     ],
#     "instructions": [
#       "This is the recovery phrase for your wallet. You and you alone have access to it.",
#       "It can be used to restore your wallet.",
#       "Best practices for your recovery phrase are to write it down on paper and store it somewhere secure.",
#       "Resist temptation to email it to yourself or screenshot it."
#     ]
#   }
# }

### 11. Restore Wallet from Recovery Phrase
POST {{baseUrl}}/wallets/restore
Content-Type: application/json

{
  "userId": "user123",
  "mnemonic": "apple banana cherry dog elephant friend grape hello island jungle kite lion"
}

### Example Response for Restore Wallet from Recovery Phrase
# HTTP/1.1 201 Created
# {
#   "success": true,
#   "message": "Wallet restored successfully",
#   "data": {
#     "address": "0x3a1b2c3d4e5f...",
#     "balance": 100
#   }
# }

### 12. Get All Blockchain Transactions
GET {{baseUrl}}/transactions/blockchain

### Example Response for Get All Blockchain Transactions
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "data": {
#     "transactions": [
#       {
#         "transactionId": "tx123456789",
#         "fromAddress": "0x3a1b2c3d4e5f...",
#         "toAddress": "0x6a7b8c9d0e1f...",
#         "amount": 25,
#         "timestamp": "2023-08-22T15:45:30.123Z"
#       },
#       {
#         "transactionId": "tx987654321",
#         "fromAddress": "0x6a7b8c9d0e1f...",
#         "toAddress": "0x3a1b2c3d4e5f...",
#         "amount": 10,
#         "timestamp": "2023-08-22T14:30:15.123Z"
#       }
#     ],
#     "pagination": {
#       "total": 25,
#       "page": 1,
#       "limit": 10,
#       "pages": 3
#     }
#   }
# }

### 13. Get Blockchain Transactions with Pagination
GET {{baseUrl}}/transactions/blockchain?page=2&limit=5

### Example Response for Get Blockchain Transactions with Pagination
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "data": {
#     "transactions": [
#       {
#         "transactionId": "tx567890123",
#         "fromAddress": "0x3a1b2c3d4e5f...",
#         "toAddress": "0x6a7b8c9d0e1f...",
#         "amount": 15,
#         "timestamp": "2023-08-22T13:20:10.123Z"
#       },
#       {
#         "transactionId": "tx345678901",
#         "fromAddress": "0x9a8b7c6d5e4f...",
#         "toAddress": "0x3a1b2c3d4e5f...",
#         "amount": 5,
#         "timestamp": "2023-08-22T12:15:45.123Z"
#       }
#     ],
#     "pagination": {
#       "total": 25,
#       "page": 2,
#       "limit": 5,
#       "pages": 5
#     }
#   }
# }

### 14. Set Mining Address
POST {{baseUrl}}/mining/address
Content-Type: application/json

{
  "address": "MYCOIN123abc..."
}

### Example Response for Set Mining Address
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "message": "Mining address set successfully",
#   "data": {
#     "address": "MYCOIN123abc..."
#   }
# }

### 15. Get Mining Status
GET {{baseUrl}}/mining/status

### Example Response for Mining Status
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "data": {
#     "mining": false,
#     "difficulty": 4,
#     "miningAddress": "MYCOIN123abc..."
#   }
# }

### 16. Set Mining Difficulty
POST {{baseUrl}}/mining/difficulty
Content-Type: application/json

{
  "difficulty": 3
}

### Example Response for Set Mining Difficulty
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "message": "Difficulty updated successfully",
#   "data": {
#     "difficulty": 3
#   }
# }

### 17. Start Mining Process
POST {{baseUrl}}/mining/start
Content-Type: application/json

{}

### Example Response for Start Mining
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "message": "Mining started successfully",
#   "data": {
#     "mining": true
#   }
# }

### 18. Stop Mining Process
POST {{baseUrl}}/mining/stop
Content-Type: application/json

{}

### Example Response for Stop Mining
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "message": "Mining stopped successfully",
#   "data": {
#     "mining": false
#   }
# }

### 19. Mine a Single Block (for testing)
POST {{baseUrl}}/mining/mine-block
Content-Type: application/json

{
  "minerAddress": "MYCOIN123abc..."
}

### Example Response for Mine Single Block
# HTTP/1.1 200 OK
# {
#   "success": true,
#   "message": "Block mined successfully",
#   "data": {
#     "timestamp": 1693054381023,
#     "transactions": [
#       {
#         "fromAddress": null,
#         "toAddress": "MYCOIN123abc...",
#         "amount": 50
#       }
#     ],
#     "previousHash": "0000a1b2c3d4e5f6...",
#     "index": 5,
#     "nonce": 24683,
#     "hash": "000079e8a92c6b5d..."
#   }
# }
